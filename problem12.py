# Project Euler
# Problem 12: Highly Divisible Triangular Number
# Author: Marshall Jacobs

"""
The sequence of triangular numbers is generated by adding the natural numbers.
So, the 7th triangular number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55

We can see that 28 is the first triangular number to have over five divisors.

Find the first triangular number to have over five hundred divisors.
"""
def count_divisors(n):
    count = 0
    for i in range(1, int(n**0.5) + 1):
        if n % i == 0:
            count += 2  # i and n // i
            if i * i == n:
                count -= 1  # Correct for perfect square
    return count

def find_triangular_with_divisors(target_divisors=500): 
    n = 1
    triangular_number = 0
    while True:
        triangular_number += n  # Generate the nth triangular number
        if count_divisors(triangular_number) > target_divisors:
            return triangular_number
        n += 1

print(find_triangular_with_divisors())